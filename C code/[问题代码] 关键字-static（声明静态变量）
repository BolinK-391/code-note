#include <stdio.h>

int fun(){
    static int count = 1;
    //静态局部变量存储于进程的静态数据区，即使函数返回，它的值也会保持不变。
    return ++count;
}

int main() {
    int answer;
    answer = fun() - fun() * fun();
    //     = 2 - 3 * 4
    //     = 10
    printf("%d\n",answer);
    return 0;
}

//这个代码有问题！
//虽然在大多数的编译器上求得结果都是相同的。
//但是上述代码 answer = fun() - fun() * fun(); 中我们只能通过操作符的优先级得知：
//先算乘法，再算减法。

//函数的调用先后顺序无法通过操作符的优先级确定。

//局部变量

//普通局部变量：
//在任何一个函数内部定义的变量（不加static修饰符）都属于这个范畴。
// 编译器一般不对普通局部变量进行初始化，也就是说它的值在初始时是不确定的，除非对其显式赋值。

//普通局部变量存储于进程栈空间，使用完毕会立即释放。

//静态局部变量：
//使用static修饰符定义的局部变量，即使在声明时未赋初值，编译器也会把它初始化为0。

//静态局部变量存储于进程的静态数据区，即使函数返回，它的值也会保持不变。
