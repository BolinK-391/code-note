希尔排序法又称缩小增量法。
希尔排序法的基本思想是：先选定一个整数，把待排序文件中所有记录分成个组，
所有距离为的记录分在同一组内，并对每一组内的记录进行排序。然后取重复上述分组和排序的工作。
当到达=1时，所有记录在统一组内排好序。

希尔排序的特性总结：
1. 希尔排序是对直接插入排序的优化。
2. 当gap > 1时都是预排序，目的是让数组更接近于有序。当gap == 1时，数组已经接近有序的了，这样就会很快。
   这样整体而言，可以达到优化的效果。我们实现后可以进行性能测试的对比。
3. 希尔排序的时间复杂度不好计算，因为gap的取值方法很多，导致很难去计算，因此在好些树中给出的希尔排序的时间复杂度都不固定。


// 希尔排序
//1、预排序
//2、直接插入排序
//时间复杂度：O(N^1.3 ~ N ^2)
void ShellSort(int* a, int n)
{
    //1、gap > 1相当于预排序，让数组接近有序
    //2、gap == 1就相当于直接插入排序，保证有序

    int gap = n;
    while(gap > 1)
    {
        gap = gap / 3 + 1;//+1保证了最后一次gap一定是1
        //gap == 1最后一次就相当于直接插入排序

        //gap越大，前面大的数据可以越快到后面，后面小的数，可以越快到前面。
        //gap越大，越不接近有序。gap越小越接近有序。如果 gap == 1其实就相当于直接插入排序，就有序了。

        //多组并排
        for (int i = 0; i < n - gap; ++i)
        {
            int end = i;
            int tmp = a[end + gap];
            while (end >= 0)
            {
                if (tmp < a[end])
                {
                    a[end + gap] = a[end];
                    end -= gap;
                }
                else
                {
                    break;
                }
            }
            a[end + gap] = tmp;
        }
        //PrintArray(a,n);
    }
}