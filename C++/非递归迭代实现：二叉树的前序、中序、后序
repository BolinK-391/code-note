#include <iostream>
#include <vector>
#include <stack>
using namespace std;

// 非递归迭代实现，二叉树的前序、中序、后序

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// 非递归(迭代)访问一棵树 <前序遍历>
//
// 1、左路节点 访问+入栈
// 2、这些左路节点的右子树
//
// 如何访问这些右子树呢?
// 再将他们分成左路节点和右树迭代来访问

//前序遍历
class Preorder_Solution {
public:
    vector<int> preorderTraversal(TreeNode* root)
    {
        vector<int> ret;
        stack<TreeNode*> st; // 栈（先进后出） 用来储存节点，方便找右子树
        TreeNode* cur = root;

        while(cur || !st.empty())
        {
            // 1、先访问树左路节点
            // 2、再访问左路节点的右子树

            while(cur){
                ret.push_back(cur->val);
                st.push(cur);
                cur = cur->left;
            }
            //取栈中左路节点的右子树出来访问
            TreeNode*top = st.top();
            st.pop();
            cur = top->right;
        }
        return ret;
    }
};


//中序遍历（和前序遍历相比入栈点不同）
class Inorder_Solution {
public:
    vector<int> inorderTraversal(TreeNode* root)
    {
        vector<int> ret;
        stack<TreeNode*> st; // 栈（先进后出） 用来储存节点，方便找右子树
        TreeNode* cur = root;

        while(cur || !st.empty())
        {
            // 1、先访问树左路节点
            // 2、再访问左路节点的右子树

            while(cur)
            {
                //ret.push_back(cur->val);   // 和前序遍历的区别点
                st.push(cur);
                cur = cur->left;
            }
            //取栈中左路节点的右子树出来访问
            TreeNode*top = st.top();
            ret.push_back(top->val);   // 和前序遍历的区别点
            st.pop();
            cur = top->right;
        }
        return ret;
    }
};


//后序遍历（镜像前序遍历后反转数组）
class Postorder_Solution_1 {
public:
    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int> ret;
        stack<TreeNode*> st; // 栈（先进后出） 用来储存节点，方便找右子树
        TreeNode* cur = root;

        while(cur || !st.empty())
        {
            // 1、先访问树右路节点
            // 2、再访问右路节点的左子树
            // 3、倒转ret数组（左右镜像前序遍历后反方向）

            while(cur)
            {
                ret.push_back(cur->val);
                st.push(cur);
                cur = cur->right;
            }
            //取栈中左路节点的右子树出来访问
            TreeNode*top = st.top();
            st.pop();
            cur = top->left;
        }

        reverse(ret.begin(),ret.end());
        return ret;
    }
};

//后序遍历-双指针解法
class Postorder_Solution_2 {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ret;
        stack<TreeNode*> st; // 栈（先进后出） 用来储存节点，方便找右子树
        TreeNode* cur = root;
        TreeNode* lastNode = nullptr;

        while(cur || !st.empty()) 
        {
            // 1、左路节点入栈
            // 2、再访问左路节点的右子树
            while(cur)
            {
                st.push(cur);
                lastNode = cur;
                cur = cur->left;
            }
                // 取到左路节点
                // a.如果左路节点的右为空或者上一个最近访问节点是右子树的根，则表示右子树已经访问过了，可以访问这个节点了
                // b.否则迭代访问右子树
            TreeNode*top = st.top();
            if(top->right == NULL || lastNode == top->right)
            {
                ret.push_back(top->val);
                lastNode = top;
                st.pop();
            }
            else
                cur = top->right;
            }
        return ret;
    }
};
