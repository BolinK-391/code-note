#include <iostream>
#include <vector>
using namespace std;

//输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
//
// 输入：
// [1,2,3,4,5],[4,5,3,2,1]
//
// 返回值：
// true
//
// 说明：
// 可以通过push(1)=>push(2)=>push(3)=>push(4)=>pop()=>push(5)=>pop()=>pop()=>pop()=>pop()
// 这样的顺序得到[4,5,3,2,1]这个序列，返回true 

class Solution {
public:
    /**
     * @param pushV int整型vector 
     * @param popV int整型vector 
     * @return bool布尔型
     */
    bool IsPopOrder(vector<int>& pushV, vector<int>& popV) {
        stack<int> st;
        int pushi = 0,popi = 0;
        while(pushi < pushV.size())
        {
            st.push(pushV[pushi]);
            pushi++;
            while(!st.empty() && st.top() == popV[popi])
            {
                st.pop();
                ++popi;
            }
        }

        return st.empty();
    }
};
