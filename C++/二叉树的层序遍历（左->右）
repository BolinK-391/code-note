#include <iostream>
#include <vector>
using namespace std; 

//给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。
//
//输入：root = [3,9,20,null,null,15,7]
//输出：[[3],[9,20],[15,7]]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> vv;

    queue<TreeNode*> q;
    //queue<int> levelq; //记录每个节点是第几层
    if(root)
        q.push(root);

    while(!q.empty())
    {
        // 通过控制每一层的数据个数，一个循坏一层数据一层数据出
        // 当第n层出完了，第n+1层都进队列了，q.size()就是n+1层的数据个数，循环再继续处理
        int levelSize =q.size();
        vector<int> v;
        for(size_t i=0; i < levelSize; ++i)
        {
            TreeNode*front =q.front();
            q.pop();
            //出栈 pop()
            //出栈：删除栈顶（数组的尾部）的一个元素，并且返回它的值
            v.push_back(front->val);
            if(front->left)
                q.push(front->left);
            if(front->right)
                q.push(front->right);
        }

        vv.push_back(v);
    }
    return vv;
    }
};
