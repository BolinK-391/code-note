#include <iostream>
#include <cassert>
#include <string>
using namespace std;

// 给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。
//
// 请你计算该表达式。返回一个表示表达式值的整数。

// 输入：tokens = ["2","1","+","3","*"]
// 输出：9
// 解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st;
        for(auto& str : tokens)
        {
            // 1.操作符取栈数据进行运算
            // 2.操作数入栈
            if(str == "+" || str == "-" || str == "/" || str == "*")
            {
                int right = st.top();
                st.pop();
                int left = st.top();
                st.pop();

                switch(str[0])
                {
                    case '+' :
                    st.push(left + right);
                    break;
                    
                    case '-' :
                    st.push(left - right);
                    break;
                    
                    case '/' :
                    st.push(left / right);
                    break;
                    
                    case '*' :
                    st.push(left * right);
                    break;
                }
            }
            else
                st.push(stoi(str));
        }
        return st.top();
    }
};
