#include <iostream>
using namespace std;

// 给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。
// 输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
// 输出: [3,9,20,null,null,15,7]

前序遍历 preorder = [3,9,20,15,7]   根 左子树 右子树
中序遍历 inorder  = [9,3,15,20,7]   左子树 根 右子树
	                 |
             左子树的中序 根 右子树的中序
----------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode*buildTree(vector<int>& preorder, vector<int>& inorder, int& prei, int inbegin, int inend)
    {
        if(inbegin >inend)
            return NULL;
            
        TreeNode* root = new TreeNode(preorder[prei]);
        int rooti = inbegin;
        while(rooti <= inend)
        {
            if(inorder[rooti] == preorder[prei])
                break;
            else
                ++rooti;
        }
        // [inbegin, rooti-1] rooti [rooti+1, inend]

        if(inbegin <= rooti-1)
            root->left = buildTree(preorder, inorder, ++prei, inbegin, rooti-1);
        else
            root->left = NULL;

        if(rooti+1 <= inend)
            root->right = buildTree(preorder, inorder, ++prei, rooti+1, inend);
        else
            root->right = NULL;

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)
    {
        int prei = 0;
        int inbegin = 0, inend = inorder.size()-1;
        return buildTree(preorder,inorder,prei,inbegin,inend);
    }
};

// 通过前序和中序区间可以构建一颗树
// 1、前序确定根
// 2、中序确定左子树中序区间 和右子树的中序区间
// 使用左子树的前序+左子树的中序区间递归构建左子树
// 使用右子树的前序+右子树的中序区间递归构建右子树
